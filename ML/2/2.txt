import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from operator import mul
import math
def compute_regcoef(x,y):
     n=len(x)
     sumxy=sum(list(map(mul,x,y)))
     num=n*sumxy-sum(x)*sum(y)
     sumxx=sum(list(map(mul,x,x)))
     denom=n*sumxx-sum(x)**2
     m=num/denom
     c=(sum(y)-m*sum(x))/n
     return(c,m)
--------------------------------------
def plot_regline(x,y,b):
     plt.scatter(x,y,color='b',marker='o',s=80)
     y_pred=np.float_(x)*b[1]+b[0]
     plt.plot(x,y_pred,color='g')
     plt.xlabel('X-variable')
     plt.ylabel('Y-variable')
     plt.show()
-------------------------------------------------
x=[1,2,3,4,5,6,7,8,9]
y=[1,2,3,4,5,6,7,8,9]
b=compute_regcoef(x,y)
type(b)
print('intercept',b[0])
print('slope',b[1])
plot_regline(x,y,b)
-------------------------------------
x=[1,2,3,4,5,6,7,8,9]
y=[1,2,3,7,7,8,9,9,9]
b=compute_regcoef(x,y)
type(b)
print('intercept',b[0])
print('slope',b[1])
plot_regline(x,y,b)
---------------------------------------
df=pd.read_csv('2.csv')
print(df)
---------------------------------------
df.columns
--------------------------------------
df.dtypes
-----------------------------------------
x=df.iloc[:,1:2].values
y=df.iloc[:,2].values
b=compute_regcoef(x,y)
type(b)
print('intercept',b[0])
print('slope',b[1])
plot_regline(x,y,b)
--------------------------------------
from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.25,random_state=0)
-----------------------------------------
from sklearn.linear_model import LinearRegression
regression=LinearRegression()
regression.fit(x_train,y_train)
----------------------------------------
m=regression.coef_
print('Regression Coefficient/slope of regression line',m)
--------------------------------------------
c=regression.intercept_
print('Intercept',c)
-------------------------------------------
y_pred=regression.predict(x_test)
print(y_pred)
----------------------------------------
df1=pd.DataFrame({'Actual value':y_test.flatten(),'Predicted Value':y_pred.flatten()})
df1
---------------------------------------
x_test[0]*m+c
---------------------
plt.scatter(x_test,y_test)
plt.plot(x_test,y_pred,color='r')
plt.show()
-----------------------------
from sklearn import metrics
print('Mean Absolute Error',metrics.mean_absolute_error(y_test,y_pred))
print('Mean Squared Error',metrics.mean_squared_error(y_test,y_pred))
print('Root Mean squared error',np.sqrt(metrics.mean_squared_error(y_test,y_pred)))
